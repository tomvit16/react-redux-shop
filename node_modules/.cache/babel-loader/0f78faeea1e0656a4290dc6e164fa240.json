{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\re-store\\\\src\\\\components\\\\book-list\\\\book-list.js\";\nimport React, { Component } from 'react';\nimport BookListItem from '../book-list-item';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Spinner from '../spinner';\nimport { booksLoaded, booksRequested, booksError } from '../../actions';\nimport { withBookstoreService } from '../hoc';\nimport { compose } from '../../utils';\nimport './book-list.css';\nimport ErrorIndicator from '../error-indicator';\n\nclass BookList extends Component {\n  componentDidMount() {\n    this.props.fetchBooks();\n  }\n\n  render() {\n    const _this$props = this.props,\n          books = _this$props.books,\n          loading = _this$props.loading,\n          error = _this$props.error;\n\n    if (loading) {\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      });\n    }\n\n    if (error) {\n      return React.createElement(ErrorIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"ul\", {\n      className: \"book-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, books.map(book => {\n      return React.createElement(\"li\", {\n        key: book.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(BookListItem, {\n        book: book,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }));\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    books: state.books,\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const bookstoreService = ownProps.bookstoreService;\n  return {\n    fetchBooks: () => {\n      dispatch(booksRequested());\n      bookstoreService.getBooks().then(data => dispatch(booksLoaded(data))).catch(err => dispatch(booksError(err)));\n    }\n  };\n};\n\nexport default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(BookList);","map":{"version":3,"sources":["D:/Projects/re-store/src/components/book-list/book-list.js"],"names":["React","Component","BookListItem","bindActionCreators","connect","Spinner","booksLoaded","booksRequested","booksError","withBookstoreService","compose","ErrorIndicator","BookList","componentDidMount","props","fetchBooks","render","books","loading","error","map","book","id","mapStateToProps","state","mapDispatchToProps","dispatch","ownProps","bookstoreService","getBooks","then","data","catch","err"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,UAAtC,QAAwD,eAAxD;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,iBAAP;AACA,OAAOC,cAAP,MAA2B,oBAA3B;;AAEA,MAAMC,QAAN,SAAuBX,SAAvB,CAAiC;AAG7BY,EAAAA,iBAAiB,GAAG;AACZ,SAAKC,KAAL,CAAWC,UAAX;AAEP;;AAGDC,EAAAA,MAAM,GAAI;AAAA,wBAC4B,KAAKF,KADjC;AAAA,UACEG,KADF,eACEA,KADF;AAAA,UACSC,OADT,eACSA,OADT;AAAA,UACkBC,KADlB,eACkBA,KADlB;;AAGN,QAAID,OAAJ,EAAa;AACT,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AAED,QAAIC,KAAJ,EAAW;AACP,aAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AAED,WACI;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEKF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;AAChB,aACI;AAAI,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkB,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAED,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAlB,CADJ;AAGH,KAJD,CAFL,CADJ;AAYH;;AAhC4B;;AAmCjC,MAAME,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHP,IAAAA,KAAK,EAAEO,KAAK,CAACP,KADV;AAEHC,IAAAA,OAAO,EAAEM,KAAK,CAACN,OAFZ;AAGHC,IAAAA,KAAK,EAAEK,KAAK,CAACL;AAHV,GAAP;AAKH,CAND;;AAQA,MAAMM,kBAAkB,GAAG,CAAEC,QAAF,EAAYC,QAAZ,KAAyB;AAAA,QACzCC,gBADyC,GACrBD,QADqB,CACzCC,gBADyC;AAEhD,SAAO;AACHb,IAAAA,UAAU,EAAE,MAAM;AAClBW,MAAAA,QAAQ,CAACnB,cAAc,EAAf,CAAR;AACAqB,MAAAA,gBAAgB,CAACC,QAAjB,GACKC,IADL,CACWC,IAAD,IAAUL,QAAQ,CAACpB,WAAW,CAACyB,IAAD,CAAZ,CAD5B,EAEKC,KAFL,CAEYC,GAAD,IAASP,QAAQ,CAAClB,UAAU,CAACyB,GAAD,CAAX,CAF5B;AAGC;AANE,GAAP;AAQH,CAVD;;AAYA,eAAevB,OAAO,CAClBD,oBAAoB,EADF,EAElBL,OAAO,CAACmB,eAAD,EAAkBE,kBAAlB,CAFW,CAAP,CAGbb,QAHa,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport BookListItem from '../book-list-item';\r\nimport { bindActionCreators } from 'redux'; \r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../spinner';\r\nimport { booksLoaded, booksRequested, booksError } from '../../actions';\r\nimport { withBookstoreService } from '../hoc';\r\nimport { compose } from '../../utils';\r\nimport './book-list.css';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nclass BookList extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n            this.props.fetchBooks();\r\n       \r\n    }\r\n\r\n\r\n    render () {\r\n        const { books, loading, error } = this.props;\r\n\r\n        if (loading) {\r\n            return <Spinner />\r\n        }\r\n\r\n        if (error) {\r\n            return <ErrorIndicator />;\r\n        }\r\n\r\n        return (\r\n            <ul className=\"book-list\">\r\n             {\r\n                 books.map((book) => {\r\n                     return (\r\n                         <li key={book.id}><BookListItem book={book} /></li>\r\n                     )\r\n                 })\r\n             }\r\n            \r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        books: state.books,\r\n        loading: state.loading,\r\n        error: state.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = ( dispatch, ownProps) => {\r\n    const {bookstoreService} = ownProps;\r\n    return {\r\n        fetchBooks: () => {\r\n        dispatch(booksRequested());\r\n        bookstoreService.getBooks()\r\n            .then((data) => dispatch(booksLoaded(data)))\r\n            .catch((err) => dispatch(booksError(err)));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withBookstoreService(),\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(BookList);\r\n\r\n"]},"metadata":{},"sourceType":"module"}