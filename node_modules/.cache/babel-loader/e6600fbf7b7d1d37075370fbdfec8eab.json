{"ast":null,"code":"import _defineProperty from \"D:\\\\Projects\\\\re-store\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst initialState = {\n  books: [],\n  loading: true,\n  error: null,\n  cartItems: [],\n  orderTotal: 0\n};\n\nconst updateCartItems = (cartItems, item, idx) => {\n  if (item.count === 0) {\n    return [...cartItems.slice(0, idx), ...cartItems.slice(idx + 1)];\n  }\n\n  if (item.count === -1) {\n    return [...cartItems, item];\n  }\n\n  ;\n  return [...cartItems.slice(0, idx), item, ...cartItems.slice(idx + 1)];\n};\n\nconst updateCartItem = (book, item = {}, quantity) => {\n  const _item$id = item.id,\n        id = _item$id === void 0 ? book.id : _item$id,\n        _item$count = item.count,\n        count = _item$count === void 0 ? 0 : _item$count,\n        _item$title = item.title,\n        title = _item$title === void 0 ? book.title : _item$title,\n        _item$total = item.total,\n        total = _item$total === void 0 ? 0 : _item$total;\n  return {\n    id,\n    title,\n    count: count + quantity,\n    total: total + quantity * book.price\n  };\n};\n\nconst updateOrder = (state, bookId, quantity) => {\n  const books = state.bookList.books,\n        cartItems = state.shoppingCart.cartItems;\n  const book = books.find(book => book.id === bookId);\n  const itemIndex = cartItems.findIndex(({\n    id\n  }) => id === bookId);\n  const item = cartItems[itemIndex];\n  const newItem = updateCartItem(book, item, quantity);\n  return {\n    orderTotal: 0,\n    cartItems: updateCartItems(state.cartItems, newItem, itemIndex)\n  };\n};\n\nconst updateBookList = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUESTED':\n      return _objectSpread({}, state, {\n        books: [],\n        loading: true,\n        error: null\n      });\n\n    case 'FETCH_BOOKS_SUCCESS':\n      return _objectSpread({}, state, {\n        books: action.payload,\n        loading: false,\n        error: null\n      });\n\n    case 'FETCH_BOOKS_FAILURE':\n      return _objectSpread({}, state, {\n        books: [],\n        loading: false,\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'BOOK_ADDED_TO_CART':\n      return updateOrder(state, action.payload, 1);\n\n    case 'BOOK_REMOVED_FROM_CART':\n      return updateOrder(state, action.payload, -1);\n\n    case 'ALL_BOOKS_REMOVED_FROM_CART':\n      const item = state.cartItems.find(({\n        id\n      }) => id === action.payload);\n      return updateOrder(state, action.payload, -item.count);\n\n    default:\n      return state;\n  }\n\n  switch (action.type) {\n    case 'FETCH_BOOKS_REQUEST':\n    case 'FETCH_BOOKS_SUCCESS':\n    case 'FETCH_BOOKS_FAILURE':\n      return _objectSpread({}, state, {\n        bookList: updateBookList(state, action)\n      });\n\n    case 'BOOK_ADDED_TO_CART':\n    case 'BOOK_REMOVED_FROM_CART':\n    case 'ALL_BOOKS_REMOVED_FROM_CART':\n      return _objectSpread({}, state, {\n        shoppingCart: updateShoppingCart(state, action)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer; // const initialState = {\n//     bookList: {\n//         books: [],\n//         loading: true,\n//         error: null\n//     },\n//     shoppingCart: {\n//         cartItems: [],\n//         orderTotal: 0\n//     }\n// };\n// const updateCartItems = (cartItems, item, idx) => {\n//     if (item.count === 0) {\n//         return [\n//             ...cartItems.slice(0, idx),\n//             ...cartItems.slice(idx + 1)\n//         ];\n//     }\n//     if (item.count === -1) {\n//         return [\n//             ...cartItems,\n//             item\n//         ];\n//     };\n//     return [\n//         ...cartItems.slice(0, idx),\n//         item,\n//         ...cartItems.slice(idx + 1)\n//     ];\n// }\n// const updateCartItem = (book, item = {}, quantity) => {\n//     const { id = book.id, count = 0, title = book.title, total = 0 } = item;\n//   return {\n//       id,\n//       title,\n//       count: count + quantity,\n//       total: total + quantity*book.price\n//   };\n// };\n// const updateOrder = (state, bookId, quantity) => {\n//     const { bookList: { books }, shoppingCart: { cartItems } } = state;\n//             const book = books.find((book) => book.id === bookId);\n//             const itemIndex = cartItems.findIndex(({id}) => id === bookId);\n//             const item = cartItems[itemIndex];\n//             const newItem = updateCartItem(book, item, quantity)\n//                 return {\n//                     orderTotal: 0,\n//                     cartItems: updateCartItems(state.cartItems, newItem, itemIndex)\n//                 };\n// };\n// const updateBookList = (state, action) => {\n//     switch (action.type) {\n//         case 'FETCH_BOOKS_REQUESTED':\n//                 return {\n//                     books: [],\n//                     loading: true,\n//                     error: null\n//                 };\n//             case 'FETCH_BOOKS_SUCCESS':\n//                 return {\n//                     books: action.payload,\n//                     loading: false,\n//                     error: null\n//                 };\n//             case 'FETCH_BOOKS_FAILURE':\n//                 return {\n//                     books: [],\n//                     loading: false,\n//                     error: action.payload\n//                 };\n//                 default:\n//                         return state;   \n//     }\n// }\n// const updateShoppingCart = (state, action) => {\n//     switch (action.type) {\n//         case 'BOOK_ADDED_TO_CART':\n//             return updateOrder(state, action.payload, 1);\n//         case 'BOOK_REMOVED_FROM_CART':\n//                 return updateOrder(state, action.payload, -1);\n//         case 'ALL_BOOKS_REMOVED_FROM_CART':\n//             const item = state.cartItems.find(({id}) => id === action.payload);\n//             return updateOrder(state, action.payload, -item.count);\n//             default:\n//                     return state;   \n// }\n// }\n// const reducer = (state = initialState, action) => {\n//     switch (action.type) {   \n//         case 'FETCH_BOOKS_REQUEST':\n//         case 'FETCH_BOOKS_SUCCESS':\n//         case 'FETCH_BOOKS_FAILURE':\n//             return {\n//                 ...state,\n//                 bookList: updateBookList(state, action)\n//             };\n//         case 'BOOK_ADDED_TO_CART':\n//         case 'BOOK_REMOVED_FROM_CART':\n//         case 'ALL_BOOKS_REMOVED_FROM_CART':\n//             return {\n//                 ...state,\n//                 shoppingCart: updateShoppingCart(state, action)\n//             };\n//         default:\n//                 return state;                      \n//     }\n// };\n// export default reducer;","map":{"version":3,"sources":["D:/Projects/re-store/src/reducers/index.js"],"names":["initialState","books","loading","error","cartItems","orderTotal","updateCartItems","item","idx","count","slice","updateCartItem","book","quantity","id","title","total","price","updateOrder","state","bookId","bookList","shoppingCart","find","itemIndex","findIndex","newItem","updateBookList","action","type","payload","reducer","updateShoppingCart"],"mappings":"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":["\r\nconst initialState = {\r\n \r\n        books: [],\r\n        loading: true,\r\n        error: null,\r\n  \r\n\r\n  \r\n        cartItems: [],\r\n        orderTotal: 0\r\n \r\n \r\n};\r\n\r\nconst updateCartItems = (cartItems, item, idx) => {\r\n\r\n    if (item.count === 0) {\r\n        return [\r\n            ...cartItems.slice(0, idx),\r\n            ...cartItems.slice(idx + 1)\r\n        ];\r\n    }\r\n\r\n    if (item.count === -1) {\r\n        return [\r\n            ...cartItems,\r\n            item\r\n        ];\r\n    };\r\n\r\n    return [\r\n        ...cartItems.slice(0, idx),\r\n        item,\r\n        ...cartItems.slice(idx + 1)\r\n    ];\r\n}\r\n\r\nconst updateCartItem = (book, item = {}, quantity) => {\r\n    const { id = book.id, count = 0, title = book.title, total = 0 } = item;\r\n\r\n  return {\r\n      id,\r\n      title,\r\n      count: count + quantity,\r\n      total: total + quantity*book.price\r\n  };\r\n};\r\n\r\nconst updateOrder = (state, bookId, quantity) => {\r\n\r\n    const { bookList: { books }, shoppingCart: { cartItems } } = state;\r\n\r\n            const book = books.find((book) => book.id === bookId);\r\n            const itemIndex = cartItems.findIndex(({id}) => id === bookId);\r\n            const item = cartItems[itemIndex];\r\n            const newItem = updateCartItem(book, item, quantity)\r\n                return {\r\n                    orderTotal: 0,\r\n                    cartItems: updateCartItems(state.cartItems, newItem, itemIndex)\r\n                };\r\n\r\n};\r\n\r\nconst updateBookList = (state, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'FETCH_BOOKS_REQUESTED':\r\n                return {\r\n                    ... state,\r\n                    books: [],\r\n                    loading: true,\r\n                    error: null\r\n    \r\n                };\r\n            case 'FETCH_BOOKS_SUCCESS':\r\n                return {\r\n                    ... state,\r\n                    books: action.payload,\r\n                    loading: false,\r\n                    error: null\r\n                };\r\n            case 'FETCH_BOOKS_FAILURE':\r\n                return {\r\n                    ... state,\r\n                    books: [],\r\n                    loading: false,\r\n                    error: action.payload\r\n                };\r\n                default:\r\n                        return state;   \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'BOOK_ADDED_TO_CART':\r\n            return updateOrder(state, action.payload, 1);\r\n\r\n        case 'BOOK_REMOVED_FROM_CART':\r\n                return updateOrder(state, action.payload, -1);\r\n\r\n        case 'ALL_BOOKS_REMOVED_FROM_CART':\r\n            const item = state.cartItems.find(({id}) => id === action.payload);\r\n            return updateOrder(state, action.payload, -item.count);\r\n            default:\r\n                    return state;   \r\n}\r\n\r\n    switch (action.type) {   \r\n        case 'FETCH_BOOKS_REQUEST':\r\n        case 'FETCH_BOOKS_SUCCESS':\r\n        case 'FETCH_BOOKS_FAILURE':\r\n            return {\r\n                ...state,\r\n                bookList: updateBookList(state, action)\r\n            };\r\n        \r\n        case 'BOOK_ADDED_TO_CART':\r\n        case 'BOOK_REMOVED_FROM_CART':\r\n        case 'ALL_BOOKS_REMOVED_FROM_CART':\r\n            return {\r\n                ...state,\r\n                shoppingCart: updateShoppingCart(state, action)\r\n            };\r\n\r\n        default:\r\n                return state;                      \r\n\r\n    }\r\n\r\n  \r\n};\r\n\r\nexport default reducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const initialState = {\r\n//     bookList: {\r\n//         books: [],\r\n//         loading: true,\r\n//         error: null\r\n//     },\r\n\r\n//     shoppingCart: {\r\n//         cartItems: [],\r\n//         orderTotal: 0\r\n//     }\r\n    \r\n \r\n// };\r\n\r\n// const updateCartItems = (cartItems, item, idx) => {\r\n\r\n//     if (item.count === 0) {\r\n//         return [\r\n//             ...cartItems.slice(0, idx),\r\n//             ...cartItems.slice(idx + 1)\r\n//         ];\r\n//     }\r\n\r\n//     if (item.count === -1) {\r\n//         return [\r\n//             ...cartItems,\r\n//             item\r\n//         ];\r\n//     };\r\n\r\n//     return [\r\n//         ...cartItems.slice(0, idx),\r\n//         item,\r\n//         ...cartItems.slice(idx + 1)\r\n//     ];\r\n// }\r\n\r\n// const updateCartItem = (book, item = {}, quantity) => {\r\n//     const { id = book.id, count = 0, title = book.title, total = 0 } = item;\r\n\r\n//   return {\r\n//       id,\r\n//       title,\r\n//       count: count + quantity,\r\n//       total: total + quantity*book.price\r\n//   };\r\n// };\r\n\r\n// const updateOrder = (state, bookId, quantity) => {\r\n\r\n//     const { bookList: { books }, shoppingCart: { cartItems } } = state;\r\n\r\n//             const book = books.find((book) => book.id === bookId);\r\n//             const itemIndex = cartItems.findIndex(({id}) => id === bookId);\r\n//             const item = cartItems[itemIndex];\r\n//             const newItem = updateCartItem(book, item, quantity)\r\n//                 return {\r\n//                     orderTotal: 0,\r\n//                     cartItems: updateCartItems(state.cartItems, newItem, itemIndex)\r\n//                 };\r\n\r\n// };\r\n\r\n// const updateBookList = (state, action) => {\r\n\r\n//     switch (action.type) {\r\n//         case 'FETCH_BOOKS_REQUESTED':\r\n//                 return {\r\n//                     books: [],\r\n//                     loading: true,\r\n//                     error: null\r\n    \r\n//                 };\r\n//             case 'FETCH_BOOKS_SUCCESS':\r\n//                 return {\r\n//                     books: action.payload,\r\n//                     loading: false,\r\n//                     error: null\r\n//                 };\r\n//             case 'FETCH_BOOKS_FAILURE':\r\n//                 return {\r\n//                     books: [],\r\n//                     loading: false,\r\n//                     error: action.payload\r\n//                 };\r\n//                 default:\r\n//                         return state;   \r\n//     }\r\n\r\n// }\r\n\r\n// const updateShoppingCart = (state, action) => {\r\n\r\n//     switch (action.type) {\r\n//         case 'BOOK_ADDED_TO_CART':\r\n//             return updateOrder(state, action.payload, 1);\r\n\r\n//         case 'BOOK_REMOVED_FROM_CART':\r\n//                 return updateOrder(state, action.payload, -1);\r\n\r\n//         case 'ALL_BOOKS_REMOVED_FROM_CART':\r\n//             const item = state.cartItems.find(({id}) => id === action.payload);\r\n//             return updateOrder(state, action.payload, -item.count);\r\n//             default:\r\n//                     return state;   \r\n// }\r\n// }\r\n\r\n// const reducer = (state = initialState, action) => {\r\n\r\n\r\n//     switch (action.type) {   \r\n//         case 'FETCH_BOOKS_REQUEST':\r\n//         case 'FETCH_BOOKS_SUCCESS':\r\n//         case 'FETCH_BOOKS_FAILURE':\r\n//             return {\r\n//                 ...state,\r\n//                 bookList: updateBookList(state, action)\r\n//             };\r\n        \r\n//         case 'BOOK_ADDED_TO_CART':\r\n//         case 'BOOK_REMOVED_FROM_CART':\r\n//         case 'ALL_BOOKS_REMOVED_FROM_CART':\r\n//             return {\r\n//                 ...state,\r\n//                 shoppingCart: updateShoppingCart(state, action)\r\n//             };\r\n\r\n//         default:\r\n//                 return state;                      \r\n\r\n//     }\r\n\r\n  \r\n// };\r\n\r\n// export default reducer;"]},"metadata":{},"sourceType":"module"}