{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\re-store\\\\src\\\\components\\\\book-list\\\\book-list.js\";\nimport React, { Component } from 'react';\nimport BookListItem from '../book-list-item'; // import { bindActionCreators } from 'redux'; \n\nimport { connect } from 'react-redux';\nimport Spinner from '../spinner';\nimport { fetchBooks, bookAddedToCart } from '../../actions';\nimport { withBookstoreService } from '../hoc';\nimport { compose } from '../../utils';\nimport './book-list.css';\nimport ErrorIndicator from '../error-indicator';\n\nconst BookList = ({\n  books,\n  onAddedToCart\n}) => {\n  return React.createElement(\"ul\", {\n    className: \"book-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, books.map(book => {\n    return React.createElement(\"li\", {\n      key: book.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(BookListItem, {\n      book: book,\n      onAddedToCart: () => onAddedToCart(book.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }));\n  }));\n};\n\nclass BookListContainer extends Component {\n  componentDidMount() {\n    this.props.fetchBooks();\n  }\n\n  render() {\n    const _this$props = this.props,\n          books = _this$props.books,\n          loading = _this$props.loading,\n          error = _this$props.error,\n          onAddedToCart = _this$props.onAddedToCart;\n\n    if (loading) {\n      return React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      });\n    }\n\n    if (error) {\n      return React.createElement(ErrorIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(BookList, {\n      books: books,\n      onAddedToCart: onAddedToCart,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = ({\n  bookList: {\n    books,\n    loading,\n    error\n  }\n}) => {\n  return {\n    books,\n    loading,\n    error\n  };\n};\n\nconst mapDispatchToProps = (dispatch, {\n  bookstoreService\n}) => {\n  return {\n    fetchBooks: fetchBooks(bookstoreService, dispatch),\n    onAddedToCart: id => dispatch(bookAddedToCart(id))\n  };\n};\n\nexport default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(BookListContainer);","map":{"version":3,"sources":["D:/Projects/re-store/src/components/book-list/book-list.js"],"names":["React","Component","BookListItem","connect","Spinner","fetchBooks","bookAddedToCart","withBookstoreService","compose","ErrorIndicator","BookList","books","onAddedToCart","map","book","id","BookListContainer","componentDidMount","props","render","loading","error","mapStateToProps","bookList","mapDispatchToProps","dispatch","bookstoreService"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,YAAP,MAAyB,mBAAzB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,iBAAP;AACA,OAAOC,cAAP,MAA2B,oBAA3B;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA8B;AAC3C,SACI;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAU;AAChB,WACI;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,YAAD;AACA,MAAA,IAAI,EAAED,IADN;AAEA,MAAA,aAAa,EAAE,MAAMF,aAAa,CAACE,IAAI,CAACC,EAAN,CAFlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADJ;AAOH,GARD,CAFL,CADJ;AAeH,CAhBD;;AAkBA,MAAMC,iBAAN,SAAgCf,SAAhC,CAA0C;AAEtCgB,EAAAA,iBAAiB,GAAG;AACZ,SAAKC,KAAL,CAAWb,UAAX;AACP;;AAEDc,EAAAA,MAAM,GAAI;AAAA,wBAC2C,KAAKD,KADhD;AAAA,UACEP,KADF,eACEA,KADF;AAAA,UACSS,OADT,eACSA,OADT;AAAA,UACkBC,KADlB,eACkBA,KADlB;AAAA,UACyBT,aADzB,eACyBA,aADzB;;AAGN,QAAIQ,OAAJ,EAAa;AACT,aAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,QAAIC,KAAJ,EAAW;AACP,aAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,WAAO,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEV,KAAjB;AAAwB,MAAA,aAAa,EAAEC,aAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAhBqC;;AAmB1C,MAAMU,eAAe,GAAG,CAAC;AAAEC,EAAAA,QAAQ,EAAE;AAAEZ,IAAAA,KAAF;AAASS,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB;AAAZ,CAAD,KAA4C;AAChE,SAAO;AAAEV,IAAAA,KAAF;AAASS,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,GAAP;AACH,CAFD;;AAIA,MAAMG,kBAAkB,GAAG,CAAEC,QAAF,EAAY;AAAEC,EAAAA;AAAF,CAAZ,KAAqC;AAC5D,SAAO;AACHrB,IAAAA,UAAU,EAAEA,UAAU,CAACqB,gBAAD,EAAmBD,QAAnB,CADnB;AAEHb,IAAAA,aAAa,EAAGG,EAAD,IAAQU,QAAQ,CAACnB,eAAe,CAACS,EAAD,CAAhB;AAF5B,GAAP;AAIH,CALD;;AAOA,eAAeP,OAAO,CAClBD,oBAAoB,EADF,EAElBJ,OAAO,CAACmB,eAAD,EAAkBE,kBAAlB,CAFW,CAAP,CAGbR,iBAHa,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport BookListItem from '../book-list-item';\r\n// import { bindActionCreators } from 'redux'; \r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../spinner';\r\nimport { fetchBooks, bookAddedToCart } from '../../actions';\r\nimport { withBookstoreService } from '../hoc';\r\nimport { compose } from '../../utils';\r\nimport './book-list.css';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\n\r\nconst BookList = ({ books, onAddedToCart }) => {\r\n    return (\r\n        <ul className=\"book-list\">\r\n         {\r\n             books.map((book) => {\r\n                 return (\r\n                     <li key={book.id}>\r\n                     <BookListItem\r\n                     book={book}\r\n                     onAddedToCart={() => onAddedToCart(book.id)} />\r\n                     </li>\r\n                 )\r\n             })\r\n         }        \r\n        </ul>\r\n    )\r\n}\r\n\r\nclass BookListContainer extends Component {\r\n\r\n    componentDidMount() {\r\n            this.props.fetchBooks();    \r\n    }\r\n\r\n    render () {\r\n        const { books, loading, error, onAddedToCart } = this.props;\r\n\r\n        if (loading) {\r\n            return <Spinner />\r\n        }\r\n        if (error) {\r\n            return <ErrorIndicator />;\r\n        }\r\n        return <BookList books={books} onAddedToCart={onAddedToCart} />     \r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ bookList: { books, loading, error }}) => {\r\n    return { books, loading, error };\r\n};\r\n\r\nconst mapDispatchToProps = ( dispatch, { bookstoreService }) => {\r\n    return {\r\n        fetchBooks: fetchBooks(bookstoreService, dispatch),\r\n        onAddedToCart: (id) => dispatch(bookAddedToCart(id))\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    withBookstoreService(),\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(BookListContainer);\r\n\r\n"]},"metadata":{},"sourceType":"module"}